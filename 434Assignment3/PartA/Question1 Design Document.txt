Matthew Eisler
mge987
11145250
CMPT 434 Assignment #3

Functionality:

Currently Part A initializes 11 threads, 10 Nodes and 1 hub. The Nodes all print an initialization message and
move in a randomized direction, with a distance specified by the command-line input. In addition, they will operate
over a number of time steps that's specified on the command-line. The hub initializes with its own starting position.

Limitations:

Currently Part A does not implement the messaging features required by the assignment specification. The Nodes do not
create data packets with their locations, nor do they transfer any information between themselves. There are data structures
set up to hold the data, and I have ideas on how to transfer the information, but it is not implemented yet. There is
no rangefinding algorithm either, meaning that there is no input from the command line for maximum range from another
Node. Finally, given the fact that the Nodes do not communicate between other nodes, they do not generate any other
data packets. Therefore, there is no P taken in from the command-line.

The Hub does not have any way to receive information, nor does it have any place to store the information.

Additionally, the assignment specification indicated that the Nodes and Hub should be handled by processes and I designed
the simulation using threads. I did not realize my mistake was made until too late, so I continued writing the code. I
am unsure if socket communication is possible inter-thread, but I ran out of time before I could attempt to implement
it. I also do not take in any debugging information from the command-line, so n is not taken in.

Implementation Design:

As noted above, I used a main loop that spawns 10 Node threads, then spawns a Hub thread. The Node threads use a loop that
runs K times, as given on the command line. While inter-thread communication was not implemented, I would likely move
forward by implementing it over sockets. I have also heard that using mutexes or condition variables would work, so
perhaps creating a sort of buffer or linked list that each thread could check in their loops would be useful to simulate
some form of communication.